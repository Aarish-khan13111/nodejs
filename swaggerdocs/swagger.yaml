openapi: 3.0.0
info:
  title: express and swagger
  descreption: learn about how to write swagger docs ans express
  version: 1.0.0
  contact:
    email: aarishkhan@gmail.com
    url: https://aarishkhsn.dev

servers:
  - url: "{protocol}://localhost:3000/api/{version}"
    description: for local host
    variables:
      version:
        enum:
          - v1
          - v2
        default: v1
      protocol:
        enum:
          - http
          - https
        default: http
components:
  securitySchemes:
    cookieAuth: # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /lco:
    get:
      tags:
        - string
      summary: return a great message from lco
      responses:
        200:
          description: all good and success
          content:
            application/json:
              schema:
                type: string
                example: "mysting"
        400:
          description: bad request
        500:
          description: internal server error
  /lcoobject:
    get:
      tags:
        - objects
      summary: return a uniqe courses
      responses:
        200:
          description: all good and success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: number
        400:
          description: bad request
        500:
          description: internal server error
  /courses:
    get:
      tags:
        - Array
      summary: return a all courses
      responses:
        200:
          description: all good and success
          content:
            application/json:
              schema:
                type: array
                items:
                  types: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    price:
                      type: number
        400:
          description: bad request
        500:
          description: internal server error
  /mycourse/{courseId}:
    get:
      tags:
        - string
      summary: return a course based on on request id
      parameters:
        - name: courseId
          in: path
          required: ture
          default: 22
          schema:
            type: string
      responses:
        200:
          description: all good and success
          content:
            application/json:
              schema:
                type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    price:
                      type: number
        400:
          description: bad request
        500:
          description: internal server error
  /addCourse:
    post:
      tags:
        - string
      summary: add a new course
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: ture
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                price:
                  type: number 
      responses:
        200:
          description: all good and success
          content:
            application/json:
              schema:
                type: boolean
        400:
          description: bad request
        500:
          description: internal server error
  /coursequery:
    get:
      tags:
        - string
      summary: learing about query
      parameters:
        - name: location
          in: query
          required: ture
          schema:
            type: string
            enum: [delhi,london,jaipur] 
        - name: device
          in: query
          required: ture
          schema:
            type: string
            enum: [web, mobile] 
      responses:
        200:
          description: all good and success
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
                  device:
                    type: string
        400:
          description: bad request
        500:
          description: internal server error
  /courseupload:
    get:
      tags:
        - string
      summary: uploading course image
      parameters:
        - in: header
          name: auth
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: all good and success
        400:
          description: bad request
        500:
          description: internal server error
